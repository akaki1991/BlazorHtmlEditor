@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div class="html-editor-container" @ref="containerElement">
    <div id="@editorId" class="html-editor" @onclick="OnEditorClick"></div>

    @if (showPopup)
    {
        <div class="popup-container" style="@popupStyle">
            <div class="popup-header">
                <h4>Select Item</h4>
                <button class="popup-close" @onclick="ClosePopup">&times;</button>
            </div>
            <div class="popup-content">
                <input type="text" @bind="searchText" @oninput="FilterItems" placeholder="Search..." class="popup-search" />
                <div class="popup-list">
                    @foreach (var item in filteredItems)
                    {
                        <div class="popup-item" @onclick="() => InsertItem(item)">
                            @item
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public bool ShowToolbar { get; set; } = true;
    [Parameter] public List<string> PopupItems { get; set; } = new();

    private ElementReference containerElement;
    private string editorId = $"editor_{Guid.NewGuid():N}";
    private IJSObjectReference? jsModule;
    private bool showPopup;
    private string popupStyle = "";
    private string searchText = "";
    private List<string> filteredItems = new();

    protected override async Task OnInitializedAsync()
    {
        filteredItems = PopupItems.Any() ? PopupItems.ToList() : new List<string>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/htmlEditor.js");
            await jsModule.InvokeVoidAsync("initializeEditor", editorId, ShowToolbar, DotNetObjectReference.Create(this));

            if (!string.IsNullOrEmpty(Value))
            {
                await jsModule.InvokeVoidAsync("setContent", editorId, Value);
            }
        }
    }

    [JSInvokable]
    public async Task OnContentChanged(string content)
    {
        Value = content;
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task OnEditorClick()
    {
        if (!showPopup)
        {
            var rect = await JSRuntime.InvokeAsync<BoundingClientRect>("getBoundingClientRect", containerElement);
            popupStyle = $"left: {rect.Right + 10}px; top: {rect.Top}px;";
            showPopup = true;
            StateHasChanged();
        }
    }

    private void ClosePopup()
    {
        showPopup = false;
        StateHasChanged();
    }

    private async Task InsertItem(string item)
    {
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("insertText", editorId, item);
        }
        ClosePopup();
    }

    private void FilterItems()
    {
        filteredItems = string.IsNullOrWhiteSpace(searchText)
            ? PopupItems.ToList()
            : PopupItems.Where(item => item.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            await jsModule.InvokeVoidAsync("destroyEditor", editorId);
            await jsModule.DisposeAsync();
        }
    }

    public class BoundingClientRect
    {
        public double Left { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
    }
}

<style>
    .html-editor-container {
        position: relative;
        width: 100%;
    }

    .html-editor {
        min-height: 200px;
        background: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        position: relative;
        z-index: 1;
    }

    .popup-container {
        position: fixed;
        width: 300px;
        max-height: 400px;
        background: white;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        z-index: 999;
        overflow: hidden;
    }

    .popup-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 16px;
        background: #f5f5f5;
        border-bottom: 1px solid #eee;
    }

    .popup-header h4 {
        margin: 0;
        font-size: 14px;
        font-weight: 600;
    }

    .popup-close {
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .popup-close:hover {
        color: #333;
    }

    .popup-content {
        padding: 8px;
    }

    .popup-search {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .popup-list {
        max-height: 280px;
        overflow-y: auto;
    }

    .popup-item {
        padding: 8px 12px;
        cursor: pointer;
        border-radius: 4px;
        font-size: 14px;
        transition: background-color 0.2s;
    }

    .popup-item:hover {
        background: #f0f0f0;
    }

    .popup-item:active {
        background: #e0e0e0;
    }

    /* Quill editor styles */
    .ql-toolbar {
        z-index: 2 !important;
        position: relative;
    }

    .ql-editor {
        z-index: 1 !important;
    }

    /* Ensure Quill dropdowns are visible */
    .ql-picker {
        z-index: 3 !important;
    }

    .ql-picker-options {
        z-index: 3 !important;
        background-color: white !important;
    }

    /* Custom header labels */
    .ql-picker-item[data-value="1"]::before {
        content: "Heading 1" !important;
    }

    .ql-picker-item[data-value="2"]::before {
        content: "Heading 2" !important;
    }

    .ql-picker-item[data-value="3"]::before {
        content: "Heading 3" !important;
    }

    .ql-picker-item[data-value="false"]::before {
        content: "Normal" !important;
    }

    .ql-picker-label[data-value="1"]::before {
        content: "Heading 1" !important;
    }

    .ql-picker-label[data-value="2"]::before {
        content: "Heading 2" !important;
    }

    .ql-picker-label[data-value="3"]::before {
        content: "Heading 3" !important;
    }

    .ql-picker-label[data-value="false"]::before {
        content: "Normal" !important;
    }

    .ql-picker-options {
        display: none;
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .ql-picker.ql-expanded .ql-picker-options {
        display: block;
    }
</style>